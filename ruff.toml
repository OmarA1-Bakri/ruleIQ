# Ruff configuration for ruleIQ
target-version = "py38"
line-length = 100

[lint]
select = [
    "F",   # Pyflakes (critical errors only)
    "E",   # pycodestyle errors (will be ignored in tests)
    "W",   # pycodestyle warnings (will be ignored in tests)
    "ANN", # Type annotations (will be ignored in tests)
    "ARG", # Unused arguments (will be ignored in tests)
    "PLR", # Pylint refactor (will be ignored in tests)
    "S",   # Security (will be ignored in tests for asserts)
    "PT",  # pytest-specific rules (will be ignored in tests)
]

ignore = [
    # Disable style and formatting rules for non-test files
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "RUF",  # Ruff-specific rules
    "I",    # isort
    "D",    # pydocstyle
    # Ignore non-critical issues for production readiness
    "PLR2004", # Magic value comparison
    "ANN201", # Missing return type annotation for public function
    "ANN001", # Missing type function argument
    "ANN003", # Missing type kwargs
    "ANN202", # Missing return type annotation for private function
    "ANN401", # Any type allowed in validation utilities
    "ARG002", # Unused method argument
    "ARG001", # Unused function argument
    "PLR0913", # Too many arguments
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR0911", # Too many return statements
    "S311",  # Non-cryptographic random usage (not security critical in tests)
    "S603",  # Subprocess without shell (false positive in many cases)
    "S105",  # Hardcoded password (many false positives in tests)
    "S106",  # Hardcoded password func arg
    "S110",  # Try except pass (acceptable in many cases)
    "S101",  # Assert (primarily in test files, allowed in production for validation)
    "E402",  # Module import not at top (acceptable in conditional imports)
    "ANN002", # Missing type args (gradually implementing type hints)
    "ANN204", # Missing return type special method
    "ANN206", # Missing return type class method
    "ANN205", # Missing return type static method
    "E722",  # Bare except (acceptable when properly logged)
    "F401",  # Unused import (acceptable in __init__.py files)
    "F821",  # Undefined name (often fixtures/dynamic imports)
    "PT028", # Pytest parameter with default (acceptable pattern)
    "ARG005", # Unused lambda argument (acceptable in callbacks)
    "ARG003", # Unused class method argument (acceptable for interface compliance)
    "ARG004", # Unused static method argument (acceptable for interface compliance)
    "E501",  # Line too long (acceptable for readability in many contexts)
    "S607",  # Start process with partial path (acceptable when properly validated)
    "S113",  # Request without timeout (acceptable with proper error handling)
    "F811",  # Redefined while unused (acceptable for imports and overrides)
    "E741",  # Ambiguous variable name (acceptable with context)
    "S324",  # Hashlib insecure hash (acceptable for non-cryptographic purposes)
    "S103",  # Bad file permissions (acceptable in development/test environments)
    "S104",  # Hardcoded bind all interfaces (acceptable for development)
    "S608",  # Hardcoded SQL expression (acceptable with proper validation)
    "S107",  # Hardcoded password default (acceptable for test/development)
    "S112",  # Try except continue (acceptable pattern in some cases)
    "S602",  # Subprocess popen with shell (acceptable when properly validated)
]

# Directories to exclude
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    ".env",
    "build",
    "dist",
    "htmlcov",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
    "migrations",
    "alembic/versions/*",
    "alembic/env.py",
    ".claude/*",
    "workers/*",
    "frontend/*",
]

[lint.per-file-ignores]
"tests/*" = [
    "SIM117", "B011",  # Existing ignores
    "ANN",     # Type annotations not required in tests
    "ARG",     # Unused arguments (common in pytest fixtures)
    "PLR0913", # Too many arguments (common in test methods)
    "PLR0915", # Too many statements (common in test methods)
    "PLR2004", # Magic value used in comparison (common in tests)
    "S101",    # Use of assert (required in tests)
    "PT",      # pytest-specific rules
    "E501",    # Line too long (common in test data)
    "W291",    # Trailing whitespace
    "F401",    # Unused imports (common in test fixtures)
    "F841",    # Unused variables (common in test setup)
    "E402",    # Module import not at top of file (common in tests)
    "F821",    # Undefined name (fixtures)
    "S113",    # Request without timeout (acceptable in tests)
    "S324",    # Hashlib insecure hash (acceptable in tests)
]
"*/__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"database/models.py" = ["E501"]  # Allow long lines in model definitions
"api/routers/*.py" = ["E501"]  # Allow long lines in API route definitions
"services/*.py" = ["E501"]  # Allow long lines in service implementations
"api/**/*.py" = ["E501"]  # Allow long lines in all API files
"config/**/*.py" = ["E501"]  # Allow long lines in configuration
"utils/**/*.py" = ["E501"]  # Allow long lines in utility functions
"core/**/*.py" = ["E501"]  # Allow long lines in core modules

[lint.isort]
known-first-party = ["api", "database", "services", "config", "core"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"